{
  "contract_name": "dydx-airdrop",
  "contract_version": "3.5.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "airdrop_amount",
      "airdrop_count_limit",
      "claim_msg_plaintext",
      "members",
      "minter_address",
      "name_collection_address",
      "name_discount_wl_address",
      "whitelist_code_id"
    ],
    "properties": {
      "admin": {
        "type": "string"
      },
      "airdrop_amount": {
        "type": "integer",
        "format": "uint128",
        "minimum": 0.0
      },
      "airdrop_count_limit": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "claim_msg_plaintext": {
        "type": "string"
      },
      "members": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Member"
        }
      },
      "minter_address": {
        "type": "string"
      },
      "name_collection_address": {
        "type": "string"
      },
      "name_discount_wl_address": {
        "type": "string"
      },
      "whitelist_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Member": {
        "type": "object",
        "required": [
          "address",
          "mint_count"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "mint_count": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "register"
        ],
        "properties": {
          "register": {
            "type": "object",
            "required": [
              "eth_address",
              "eth_sig"
            ],
            "properties": {
              "eth_address": {
                "type": "string"
              },
              "eth_sig": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_airdrop"
        ],
        "properties": {
          "claim_airdrop": {
            "type": "object",
            "required": [
              "eth_address",
              "eth_sig"
            ],
            "properties": {
              "eth_address": {
                "type": "string"
              },
              "eth_sig": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "airdrop_eligible"
        ],
        "properties": {
          "airdrop_eligible": {
            "type": "object",
            "required": [
              "eth_address"
            ],
            "properties": {
              "eth_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_minter"
        ],
        "properties": {
          "get_minter": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_registered"
        ],
        "properties": {
          "is_registered": {
            "type": "object",
            "required": [
              "eth_address"
            ],
            "properties": {
              "eth_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "has_claimed"
        ],
        "properties": {
          "has_claimed": {
            "type": "object",
            "required": [
              "eth_address"
            ],
            "properties": {
              "eth_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_airdrop_count"
        ],
        "properties": {
          "get_airdrop_count": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "airdrop_eligible": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "get_airdrop_count": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint32",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "get_minter": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "has_claimed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "is_registered": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    }
  }
}
